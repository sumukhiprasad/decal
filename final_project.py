# -*- coding: utf-8 -*-
"""Final_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_rb1Q5Wg0tnPnpYsPgIYRvx2lAYtzucP
"""

#import packages
import numpy as np
import matplotlib.pyplot as plt
import scipy.optimize as fit
import pandas as pd

m = 0.5
b = 3 # arbitrary parameters for a linear dataset
sigma = 1 # noise (total noise is 1 not the noise of each point)
n = 20 # number of points to generate
#xdata = np.loadtxt("APT201- MN-BW-201.csv", skiprows=1)
xdata = pd.read_csv("APT201- MN-BW-201.csv", usecols = ['Date&Time'])
#xdata = pd.read_csv("APT201- MN-BW-201.csv")
ydata = pd.read_csv("APT201- MN-BW-201.csv", usecols = ['PM2.5_Atm [µg/m³]'])

BAM_full_data = pd.read_csv("BAMDATA.csv")
BAM_data = BAM_data[2000:]
BAM_data_xvalues = pd.read_csv("BAMDATA.csv", usecols = ['ConcRT(ug/m3)', 'Time'])
BAM_data_yvalues = pd.read_csv("BAMDATA.csv", usecols = ['ConcRT(ug/m3)'])

BAM_data_new1 = BAM_data_yvalues.drop(BAM_data_yvalues[BAM_data_yvalues['ConcRT(ug/m3)'] == +99999.0].index)
BAM_data_new = BAM_data_new1.drop(BAM_data_new1[BAM_data_new1['ConcRT(ug/m3)'] <= 0].index)
BAM_data_new_forx = BAM_data_xvalues.drop(BAM_data_xvalues[BAM_data_xvalues['ConcRT(ug/m3)'] == +99999.0].index)
BAM_data_xvalues_new = np.where(np.array(BAM_data_new_forx['Time'][0:1000]))
BAM_data_yvalues_new = np.array(BAM_data_new['ConcRT(ug/m3)'][0:1000])
#BAM_data_xvalues = np.where(np.array(BAM_data_new['Time'][0:1000])) ##

#newxdata = xdata.iloc[2:]
newxdata = np.where(np.array(xdata['Date&Time'][0:1000]))
newydata = np.array(ydata['PM2.5_Atm [µg/m³]'][0:1000])

#print(ydata)
#print(xdata['Date&Time'])
#print(newxdata)
#print(BAM_data_xvalues_new)
#print(hash(xdata))
#index = np.where(BAM_data_yvalues_new == '50')
#print(index)
#print(BAM_data_xvalues_new[0].shape)
print(BAM_data)



# check data points by visualizing in a graph
plt.figure(figsize=(8,6))
fig, (ax1, ax2) = plt.subplots(1, 2)
ax1.scatter(newxdata, newydata)
ax2.scatter(BAM_data_xvalues_new[0], BAM_data_yvalues_new)

plt.show()

def f(x, m, b): # always start with x as the parameters
    return m * x + b

    #y = mx+b
    #y = ax^2 +bx+c

p0 = [.5, 2] # guess what we predict m to be and b to be, this guess doesn't have to be very close
# BAM_data_xvalues_new.shape = (1,n)
# BAM_data_yvalues_new.shape = (1,n)

# BAM_data_xvalues_new.shape = (n,)
# BAM_data_yvalues_new.shape = (n,)
# print((BAM_data_xvalues_new[0]), type(BAM_data_yvalues_new))
#parameters, covariance_matrix = fit.curve_fit(f, BAM_data_xvalues_new[0], BAM_data_yvalues_new, p0)

p1 = [.5, 2]

parameters, covariance_matrix = fit.curve_fit(f, BAM_data_xvalues_new[0], newydata, p0)
parameters2, covariance_matrix2 = fit.curve_fit(f, BAM_data_xvalues_new[0], BAM_data_yvalues_new, p1)

covariance_matrix # estimates how far our parameters are from our predicted value, top left number is error of first parameter (m) and top right number is error of second parameter (b)
covariance_matrix2

parameters # estimates our m and b
parameters2

m = parameters[0] # this accesses this element in the parameters array
b = parameters[1] # this accesses this element in the parameters array
m_error = (covariance_matrix[0,0])**0.5 # this is squarerooting it to give us the error bc the values at locations (0,0) and (1,1) are squared
b_error = (covariance_matrix[1,1])**0.5 # this is squarerooting it to give us the error

m2 = parameters2[0] # this accesses this element in the parameters array
b2 = parameters2[1] # this accesses this element in the parameters array
m_error2 = (covariance_matrix2[0,0])**0.5 # this is squarerooting it to give us the error bc the values at locations (0,0) and (1,1) are squared
b_error2 = (covariance_matrix2[1,1])**0.5 # this is squarerooting it to give us the error

print('the parameters are: ', parameters)
print('m={0:1.5f} +\- {1:1.5f}'.format(m,m_error))

print('the parameters are: ', parameters2)
print('m={0:1.5f} +\- {1:1.5f}'.format(m2,m_error2))

x = np.linspace(newxdata[0].min(), newxdata[0].max())
y = f(x,m,b)
plt.figure()
plt.plot(x,y,'--k')
plt.scatter(newxdata, newydata)
plt.title('APT Sensor Data')
plt.xlabel('Nth Measurement')
plt.ylabel('Pollutant Concentration (ug/m^3)')
plt.show()

x2 = np.linspace(BAM_data_xvalues_new[0].min(), BAM_data_xvalues_new[0].max())
y2 = f(x2,m2,b2)
plt.figure()
plt.plot(x2,y2,'--k')
plt.scatter(BAM_data_xvalues_new, BAM_data_yvalues_new)
plt.title('BAM Sensor Data')
plt.xlabel('Nth Measurement')
plt.ylabel('Pollutant Concentration (ug/m^3)')
plt.show()

corr_matrix = np.corrcoef(BAM_data_xvalues_new, BAM_data_yvalues_new)
corr = corr_matrix[0,1]
R_sq = corr**2
print(R_sq)

corr_matrix = np.corrcoef(newxdata, newydata)
corr = corr_matrix[0,1]
R_sq = corr**2
print(R_sq)

